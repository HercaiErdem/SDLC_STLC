
     En Yaygın Kullanılan Yazılım Geliştirme Metodolojileri;


    1) WATERFALL MODEL(Şelale Modeli)
    2) V MODEL
    3) AGILE METHODOLGY (Çevik Metodoloji)


     1) WATERFALL MODEL(Şelale Modeli)

    *Waterfall Modeli; proje yönetim süreci; analiz, tasarım, yazılım, test, yayın gibi
     aşamalardan oluşmaktadır.
    *Geleneksel bir yöntemdir; proje süreci tıpkı bir şelale gibi yukarıdan aşağıya doğru işler.
    *Bir aşama tamamlanıp yenisine geçildiğinde, bir önceki aşamaya geri dönülmez.
    * State holder(Proje sahibi), projeyi ancak ürün tamamlandıktan sonra görebilir.


     WATERFALL Modelinin Avantajları

     * Kullanımı ve yönetimi kolaydır.
     * Gereksinimler iyi anlaşılır.
     * Proje bilgisini aktarmak daha kolaydır.
     * Küçük projeler için daha iyidir.
     * Kapsamlı dökümanlar oluşturulur.


      Dezavantajları

     * Değişim ve yenilik zordur.
     * Müşteri öngörü ve önerileri önemsenmez.
     * Projenin bitimine kadar çalışan ürün calışıp calışmayacağı bilinemez.
     * Beklenmedik riskleri kolayca ele alınamaz.


     2) V MODEL

    *V modeli, Doğrulama(verification) ve Geçerleme (Onaylama-validation) modeli anlamına gelir.
    *Waterfall modelinde olduğu gibi yazılım yaşam döngüsü aşamaları V-şeklinde sıralı bir biçimde
     uygulanır.
    *Bu modelde de sonraki aşamaya geçebilmek için önceki aşamanın tamamlanması gerekmektedir.


     V-Modelinin Avantajları

   *Basit ve kullanımı kolaydır.
   *Planlama ve test tasarımı gibi test faaliyetleri kodlamadan önce gerçekleştirildiği için proje
   içerisinde  zaman kazandırır. Bu nedenle şelale modeline göre daha yüksek başarı şansı vardır.
   *Hatalar erken aşamada bulunur. Bulunan hataların Hataların bir sonraki aşamaya geçmesi önlenir.


     Dezavantajları

    *Uygulam yöntemi oldukça katı, kesin kurallara bağlıdır.
    *Yazılım waferfall da olduğu gibi geliştirme aşamasında geliştirilir, bu nedenle yazılımın ilk
     örnekleri üretilmez.
    *Herhangi bir aşamada gereksinimler üzerinde değişiklik olursa, test belgelerinin de diğer belgeler
     ile birlikte güncellenmelidir. Bu da fazladan iş yükü anlamına gelir.


     3) AGILE METHODOLGY (Çevik Metodoloji)

    *Agile Metodoloji, yazılım sistemlerini etkili ve verimli bir şekilde modellemeye ve dokümantasyonunu
    yapmaya yönelik, pratiğe dayalı bir yöntemdir.
    *Aşırı katı kurallara sahip klasik yazılım süreç modellerine tepki olarak ortaya çıkmıştır. Yani Waferfall
    methodolojiye karşıdır.
    *Klasik yazılım sürecinde, yazılımlar daha yüksek maliyetli ve daha yavaş geliştirilmekteydi. Agile, yazılım
    geliştirme sürecini hızlandırmak, daha etkin kullanmak ve gerektiğinde dökümante etmek amacıyla  ortaya
    çıkmıştır.
    *2001 yılında yazılım dünyasının önde gelen isimlerinden 17 arkadaş; “Agile (Çevik) Yazılım Geliştirme
    Manifestosu” ve “Agile (Çevik) Yazılımın Prensipleri” ni yayınlamışlar, bu oluşumu ve gelişimini desteklemek
    için “Agile Alliance” adıyla, bir organizasyon kurmuşlardır.
    *Manifesto, nasıl daha iyi bir yazılım geliştirdiklerinianlatan 12 maddeden oluşmaktadır.


     Waterfall (Şelale) ve Agile Karşılaştırması

    *Öncelikle her iki metotta da bir planlama yapılmaktadır.
    *Fakat buradaki temel ayrım bu planları yaparken benimsenen yaklaşım biçimleridir.
    *Waterfall, her detayı aşama aşama ve belli bir zaman dahilinde planlar.
    *Ama Agile modelinde daha kısa vadeli planlardan bahsetmek mümkündür(Genellikle 2 haftalık periodlar.)
    *Agile modelinde proje devam  ettiği esnada değişiklikler söz konusu olabilir.
    *Tüm aşamalar Şelale modelindeki gibi bariz değildir.
    *Waterfall metodunda görev sıraları birbirini takip eder. Tüm aşamalar birbirinin devamı niteliğindedir.
    *Oysa Çevik proje yönetiminde süreç dinamiktir ve değişime açıktır.
    *Waterfall incelemelerinde dokümanlar ön plandadır. Her aşamanın tamamlanmasından sonra incelemeler yapılır.
    *Çevik modelince analizler, müşterilerle yapılan iletişim neticesinde sık sık gerçekleşmektedir.
    *Waterfall modelinin uzun vadede maliyeti artırma riski vardır. Agile ise ürüne dair en iyi versiyonu bekler.
    *Bu nedenle de ürünle ilgili potansiyeli zorlar ve görece daha düşük riskler taşır.
    *Agile yaratıcılığa alan yaratır ve esnektir.
    *Oysa Waterfall modelinde bundan söz etmek pek mümkün olmaz. Bu noktada en başta alınan kararlara bağlılık
    söz konusudur ve katı kuralcıdır.

